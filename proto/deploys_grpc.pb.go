// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package deploys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeployServiceClient is the client API for DeployService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeployServiceClient interface {
	AddDeploy(ctx context.Context, in *AddDeployRequest, opts ...grpc.CallOption) (*Deploy, error)
	GetDeploy(ctx context.Context, in *GetDeployRequest, opts ...grpc.CallOption) (*Deploy, error)
}

type deployServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeployServiceClient(cc grpc.ClientConnInterface) DeployServiceClient {
	return &deployServiceClient{cc}
}

func (c *deployServiceClient) AddDeploy(ctx context.Context, in *AddDeployRequest, opts ...grpc.CallOption) (*Deploy, error) {
	out := new(Deploy)
	err := c.cc.Invoke(ctx, "/deploys.DeployService/AddDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployServiceClient) GetDeploy(ctx context.Context, in *GetDeployRequest, opts ...grpc.CallOption) (*Deploy, error) {
	out := new(Deploy)
	err := c.cc.Invoke(ctx, "/deploys.DeployService/GetDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeployServiceServer is the server API for DeployService service.
// All implementations should embed UnimplementedDeployServiceServer
// for forward compatibility
type DeployServiceServer interface {
	AddDeploy(context.Context, *AddDeployRequest) (*Deploy, error)
	GetDeploy(context.Context, *GetDeployRequest) (*Deploy, error)
}

// UnimplementedDeployServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeployServiceServer struct {
}

func (UnimplementedDeployServiceServer) AddDeploy(context.Context, *AddDeployRequest) (*Deploy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDeploy not implemented")
}
func (UnimplementedDeployServiceServer) GetDeploy(context.Context, *GetDeployRequest) (*Deploy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploy not implemented")
}

// UnsafeDeployServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeployServiceServer will
// result in compilation errors.
type UnsafeDeployServiceServer interface {
	mustEmbedUnimplementedDeployServiceServer()
}

func RegisterDeployServiceServer(s grpc.ServiceRegistrar, srv DeployServiceServer) {
	s.RegisterService(&DeployService_ServiceDesc, srv)
}

func _DeployService_AddDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServiceServer).AddDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploys.DeployService/AddDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServiceServer).AddDeploy(ctx, req.(*AddDeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployService_GetDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServiceServer).GetDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploys.DeployService/GetDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServiceServer).GetDeploy(ctx, req.(*GetDeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeployService_ServiceDesc is the grpc.ServiceDesc for DeployService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeployService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deploys.DeployService",
	HandlerType: (*DeployServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDeploy",
			Handler:    _DeployService_AddDeploy_Handler,
		},
		{
			MethodName: "GetDeploy",
			Handler:    _DeployService_GetDeploy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/deploys.proto",
}
